@page "/holidays"
@inject HttpClient Http
@inject NavigationManager Navigation
@implements IDisposable

<h3>Holiday List 2025</h3>

<div class="holiday-boxes">
    <div class="permanent-holidays">
        <h4>Permanent Holidays</h4>
        <table class="holiday-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Event</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var holiday in permanentHolidays.OrderByDescending(h => DateTime.Parse(h.Date)))
                {
                    <tr>
                        <td>@FormatDateWithoutDay(holiday.Date)</td>
                        <td>@GetDayOfWeek(holiday.Date)</td>
                        <td>@holiday.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="optional-holidays">
        <h4>Optional Holidays</h4>
        <table class="holiday-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Event</th>
                    <th>Select</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var holiday in optionalHolidays.OrderByDescending(h => DateTime.Parse(h.Date)))
                {
                    <tr>
                        <td>@FormatDateWithoutDay(holiday.Date)</td>
                        <td>@GetDayOfWeek(holiday.Date)</td>
                        <td>@holiday.Description</td>
                        <td>
                            <input type="checkbox"
                                   @bind="holiday.IsSelected"
                                   @bind:after="async () => await UpdateSelection()"
                                   disabled="@IsCheckboxDisabled(holiday)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (selectedCount > 0)
        {
            <div class="save-section">
                <button class="save-button" @onclick="SaveSelection">Save Selection (@selectedCount selected)</button>
            </div>
        }
    </div>
</div>

@if (isLoading)
{
    <p>Loading holidays...</p>
}
else if (errorMessage != null)
{
    <p class="error-message">@errorMessage</p>
}
else if (holidays.Length == 0)
{
    <p>No holidays found for 2025.</p>
}

<style>
    body {
        background-color: #ffffff;
        color: #000000;
        font-family: Arial, sans-serif;
    }

    h3 {
        color: #1e90ff;
        text-align: center;
        margin-bottom: 20px;
    }

    h4 {
        color: #1e90ff;
        margin-bottom: 10px;
    }

    .holiday-boxes {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .permanent-holidays, .optional-holidays {
        width: 45%;
        background-color: #d3d3d3;
        padding: 15px;
        border-radius: 10px;
    }

    .holiday-table {
        width: 100%;
        border-collapse: collapse;
        background-color: #f5f5f5;
    }

    .holiday-table th {
        background-color: #1e90ff;
        color: #ffffff;
        padding: 10px;
        text-align: left;
    }

    .holiday-table td {
        padding: 10px;
        border-bottom: 1px solid #000000;
        color: #000000;
    }

    .holiday-table tr:nth-child(even) {
        background-color: #ffffff;
    }

    .holiday-table tr:hover {
        background-color: #87cefa;
    }

    .error-message {
        color: #000000;
        background-color: rgb(66, 200, 100);
        padding: 10px;
        text-align: center;
        border-radius: 5px;
    }

    p {
        text-align: center;
        color: #000000;
    }

    .save-section {
        margin-top: 15px;
        text-align: center;
    }

    .save-button {
        padding: 8px 16px;
        background-color: #1e90ff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    .save-button:hover {
        background-color: #4682b4;
    }
</style>

@code {
    private Event[] holidays = Array.Empty<Event>();
    private Event[] permanentHolidays = Array.Empty<Event>();
    private Event[] optionalHolidays = Array.Empty<Event>();
    private Event[] savedHolidays = Array.Empty<Event>();
    private string? errorMessage;
    private bool isLoading = true;
    private System.Timers.Timer? timer;
    private int selectedCount => optionalHolidays.Count(h => h.IsSelected);
    private DateTime currentDate = DateTime.Now.Date;

    public class Event
    {
        public int Id { get; set; }
        public string Date { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string HolidayType { get; set; } = string.Empty;
        public bool IsSelected { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchHolidays();
        timer = new System.Timers.Timer(10000000);
        timer.Elapsed += async (sender, e) => await RefreshHolidays();
        timer.AutoReset = true;
        timer.Start();
    }

    private async Task FetchHolidays()
    {
        try
        {
            isLoading = true;
            string url = "http://localhost:5085/api/SavedHolidays";
            var savedResponse = await Http.GetAsync(url);
            savedHolidays = await savedResponse.Content.ReadFromJsonAsync<Event[]>() ?? Array.Empty<Event>();

            url = "http://localhost:5085/api/Events";
            var httpResponse = await Http.GetAsync(url);

            if (httpResponse.IsSuccessStatusCode)
            {
                holidays = await httpResponse.Content.ReadFromJsonAsync<Event[]>() ?? Array.Empty<Event>();
                foreach (var holiday in holidays)
                {
                    var savedHoliday = savedHolidays.FirstOrDefault(s => s.Date == holiday.Date);
                    if (savedHoliday != null)
                    {
                        holiday.IsSelected = true;
                    }
                }
                permanentHolidays = holidays.Where(h => h.HolidayType == "Permanent").ToArray();
                optionalHolidays = holidays.Where(h => h.HolidayType == "Optional").ToArray();
            }
            else
            {
                errorMessage = $"API request failed with status: {httpResponse.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching holidays: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshHolidays()
    {
        currentDate = DateTime.Now.Date;
        await FetchHolidays();
        await InvokeAsync(StateHasChanged);
    }

    private bool IsFutureDate(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return parsedDate.Date > currentDate;
        }
        return false;
    }

    private bool IsCheckboxDisabled(Event holiday)
    {
        return !IsFutureDate(holiday.Date) || (selectedCount >= 2 && !holiday.IsSelected);
    }

    private async Task UpdateSelection()
    {
        if (selectedCount > 2)
        {
            var firstSelected = optionalHolidays
                .Where(h => h.IsSelected && IsFutureDate(h.Date))
                .OrderBy(h => DateTime.Parse(h.Date))
                .FirstOrDefault();
            if (firstSelected != null)
            {
                firstSelected.IsSelected = false;
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveSelection()
    {
        try
        {
            var selectedHolidays = optionalHolidays
                .Where(h => h.IsSelected)
                .Select(h => new { h.Date, EventName = h.Description })
                .ToArray();

            foreach (var holiday in optionalHolidays)
            {
                if (!holiday.IsSelected)
                {
                    var savedHoliday = savedHolidays.FirstOrDefault(s => s.Date == holiday.Date);
                    if (savedHoliday != null)
                    {
                        var response = await Http.DeleteAsync($"http://localhost:5085/api/SavedHolidays/{savedHoliday.Id}");
                        if (!response.IsSuccessStatusCode)
                        {
                            errorMessage = $"Failed to delete holiday with ID {savedHoliday.Id}. Status: {response.StatusCode}";
                            return;
                        }
                    }
                }
            }

            var postResponse = await Http.PostAsJsonAsync("http://localhost:5085/api/SavedHolidays", selectedHolidays);
            if (!postResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Failed to save holidays. Status: {postResponse.StatusCode}";
                return;
            }

            errorMessage = "Successfully Saved optional holidays!";
            await FetchHolidays();
            
            await Task.Delay(2000);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating selection: {ex.Message}";
        }
        await InvokeAsync(StateHasChanged);
    }

    private string FormatDateWithoutDay(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return $"{parsedDate.Day:D2}/{parsedDate.Month:D2}/{parsedDate.Year}";
        }
        return date;
    }

    private string GetDayOfWeek(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return parsedDate.DayOfWeek.ToString();
        }
        return string.Empty;
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();
        }
    }
}